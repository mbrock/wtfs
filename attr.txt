COMMON ATTRIBUTES
     Common attributes relate to all types of file system objects.  The
     following common attributes are defined.

     ATTR_CMN_RETURNED_ATTRS   An attribute_set_t structure which is used to
			       report which of the requested attributes were
			       actually returned. This attribute, when
			       requested, will always be the first attribute
			       returned. By default, unsupported attributes
			       will be skipped (i.e. not packed into the
			       output buffer). This behavior can be over-
			       ridden using the FSOPT_PACK_INVAL_ATTRS option
			       flag. Both getattrlist(2) and
			       getatttrlistbulk(2) support this attribute
			       while searchfs(2) does not.

     ATTR_CMN_NAME	       An attrreference structure containing the name
			       of the file system object as UTF-8 encoded,
			       null terminated C string.  The attribute data
			       length will not be greater than NAME_MAX + 1
			       characters, which is NAME_MAX * 3 + 1 bytes (as
			       one UTF-8-encoded character may take up to
			       three bytes).

     ATTR_CMN_DEVID	       A dev_t containing the device number of the
			       device on which this file system object's
			       volume is mounted.  Equivalent to the st_dev
			       field of the stat structure returned by
			       stat(2).

     ATTR_CMN_FSID	       An fsid_t structure containing the file system
			       identifier for the volume on which the file
			       system object resides.  Equivalent to the
			       f_fsid field of the statfs structure returned
			       by statfs(2).

     ATTR_CMN_OBJTYPE	       An fsobj_type_t that identifies the type of
			       file system object.  The values are taken from
			       enum vtype in ⟨sys/vnode.h⟩.

     ATTR_CMN_OBJTAG	       An fsobj_tag_t that identifies the type of file
			       system containing the object.  The values are
			       taken from enum vtagtype in ⟨sys/vnode.h⟩.

     ATTR_CMN_OBJID	       An fsobj_id_t structure that uniquely
			       identifies the file system object within a
			       mounted volume for the duration of its mount;
			       this identifier is not guaranteed to be
			       persistent for the volume and may change every
			       time the volume is mounted.

			       On HFS+ volumes, the ATTR_CMN_OBJID of a file
			       system object is distinct from the
			       ATTR_CMN_OBJID of any hard link to that file
			       system object. Although the ATTR_CMN_OBJID of a
			       file system object may appear similar (in whole
			       or in part) to it's ATTR_CMN_FILEID (see
			       description of ATTR_CMN_FILEID below), no
			       relation between the two attributes should ever
			       be implied.

			       ATTR_CMN_OBJID is deprecated sarting with macOS
			       10.13, iOS 11.0, watchOS 4.0 and tvOS 11.0 and
			       ATTR_CMNEXT_LINKID should be used in its place.
			       ATTR_CMN_OBJID can only be used on older
			       operating systems only if the file system
			       doesn't 64 bit IDs. See the getLinkIDInfo()
			       function in the EXAMPLES section.

     ATTR_CMN_OBJPERMANENTID   An fsobj_id_t structure that uniquely and
			       persistently identifies the file system object
			       within its volume; persistence implies that
			       this attribute is unaffected by mount/unmount
			       operations on the volume.

			       Some file systems can not return this attribute
			       when the volume is mounted read-only and will
			       fail the request with error EROFS.
			       (e.g. original HFS modifies on disk structures
			       to generate persistent identifiers, and hence
			       cannot do so if the volume is mounted read
			       only.)

     ATTR_CMN_PAROBJID	       An fsobj_id_t structure that uniquely
			       identifies the parent directory of the file
			       system object within a mounted volume, for the
			       duration of the volume mount; this identifier
			       is not guaranteed to be persistent for the
			       volume and may change every time the volume is
			       mounted.

			       If a file system object is hard linked from
			       multiple directories, the parent directory
			       returned for this attribute is non
			       deterministic; it can be any one of the parent
			       directories of this object.  For some volume
			       formats the computing cost for this attribute
			       is significant; developers are advised to
			       request this attribute sparingly.

     ATTR_CMN_SCRIPT	       (read/write) A text_encoding_t containing a
			       text encoding hint for the file system object's
			       name.  It is included to facilitate the
			       lossless round trip conversion of names between
			       Unicode and traditional Mac OS script
			       encodings.  File systems that do not have an
			       appropriate text encoding value should return
			       kTextEncodingMacUnicode.

     ATTR_CMN_CRTIME	       (read/write) A timespec structure containing
			       the time that the file system object was
			       created.

     ATTR_CMN_MODTIME	       (read/write) A timespec structure containing
			       the time that the file system object was last
			       modified.  Equivalent to the st_mtimespec field
			       of the stat structure returned by stat(2).

     ATTR_CMN_CHGTIME	       A timespec structure containing the time that
			       the file system object's attributes were last
			       modified.  Equivalent to the st_ctimespec field
			       of the stat structure returned by stat(2).

     ATTR_CMN_ACCTIME	       (read/write) A timespec structure containing
			       the time that the file system object was last
			       accessed.  Equivalent to the st_atimespec field
			       of the stat structure returned by stat(2).

     ATTR_CMN_BKUPTIME	       (read/write) A timespec structure containing
			       the time that the file system object was last
			       backed up.  This value is for use by backup
			       utilities.  The file system stores but does not
			       interpret the value.

     ATTR_CMN_FNDRINFO	       (read/write) 32 bytes of data for use by the
			       Finder.	Equivalent to the concatenation of a
			       FileInfo structure and an ExtendedFileInfo
			       structure (or, for directories, a FolderInfo
			       structure and an ExtendedFolderInfo structure).

			       This attribute is not byte swapped by the file
			       system.	The value of multibyte fields on disk
			       is always big endian.  When running on a little
			       endian system (such as Darwin on x86), you must
			       byte swap any multibyte fields.

     ATTR_CMN_OWNERID	       (read/write) A uid_t containing the owner of
			       the file system object.	Equivalent to the
			       st_uid field of the stat structure returned by
			       stat(2).

     ATTR_CMN_GRPID	       (read/write) A gid_t containing the group of
			       the file system object.	Equivalent to the
			       st_gid field of the stat structure returned by
			       stat(2).

     ATTR_CMN_ACCESSMASK       (read/write) A u_int32_t containing the access
			       permissions of the file system object.
			       Equivalent to the st_mode field of the stat
			       structure returned by stat(2).  Only the
			       permission bits of st_mode are valid; other
			       bits should be ignored, e.g., by masking with
			       ~S_IFMT.

     ATTR_CMN_FLAGS	       (read/write) A u_int32_t containing file flags.
			       Equivalent to the st_flags field of the stat
			       structure returned by stat(2).  For more
			       information about these flags, see chflags(2).

     ATTR_CMN_GEN_COUNT        A u_int32_t containing a non zero monotonically
			       increasing generation count for this file
			       system object. The generation count tracks the
			       number of times the data in a file system
			       object has been modified. No meaning can be
			       implied from its value. The value of the
			       generation count for a file system object can
			       be compared against a previous value of the
			       same file system object for equality; i.e. an
			       unchanged generation count indicates identical
			       data. Requesting this attribute requires the
			       FSOPT_ATTR_CMN_EXTENDED option flag.

			       A generation count value of 0 is invalid and
			       cannot be used to determine data change.

			       The generation count is invalid while a file is
			       mmap'ed. An invalid generation count value of 0
			       will be returned for mmap'ed files.

     ATTR_CMN_DOCUMENT_ID      A u_int32_t containing the document id. The
			       document id is a value assigned by the kernel
			       to a document (which can be a file or
			       directory) and is used to track the data
			       regardless of where it gets moved.  The
			       document id survives safe saves; i.e it is
			       sticky to the path it was assigned to.
			       Requesting this attribute requires the
			       FSOPT_ATTR_CMN_EXTENDED option flag.

			       A document id of 0 is invalid.

     ATTR_CMN_USERACCESS       A u_int32_t containing the effective
			       permissions of the current user (the calling
			       process's effective UID) for this file system
			       object.	You can test for read, write, and
			       execute permission using R_OK, W_OK, and X_OK,
			       respectively.  See access(2) for more details.

     ATTR_CMN_EXTENDED_SECURITY
			       A variable-length object (thus an attrreference
			       structure) containing a kauth_filesec
			       structure, of which only the ACL entry is used.

     ATTR_CMN_UUID	       A guid_t of the owner of the file system
			       object.	Analoguous to ATTR_CMN_OWNERID.

     ATTR_CMN_GRPUUID	       A guid_t of the group to which the file system
			       object belongs.	Analoguous to ATTR_CMN_GRPID.

     ATTR_CMN_FILEID	       A u_int64_t that uniquely identifies the file
			       system object within its mounted volume.
			       Equivalent to st_ino field of the stat
			       structure returned by stat(2).

     ATTR_CMN_PARENTID	       A u_int64_t that identifies the parent
			       directory of the file system object.

     ATTR_CMN_FULLPATH	       An attrreference structure containing the full
			       path (resolving all symlinks) to the file
			       system object as a UTF-8 encoded, null
			       terminated C string.  The attribute data length
			       will not be greater than PATH_MAX. Inconsistent
			       behavior may be observed when this attribute is
			       requested on hard-linked items, particularly
			       when the file system does not support
			       ATTR_CMN_PARENTID natively. Callers should be
			       aware of this when requesting the full path of
			       a hard-linked item.

     ATTR_CMN_ADDEDTIME        A timespec that contains the time that the file
			       system object was created or renamed into its
			       containing directory.  Note that inconsistent
			       behavior may be observed when this attribute is
			       requested on hard-linked items.

     ATTR_CMN_DATA_PROTECT_FLAGS
			       A u_int32_t that contains the file or
			       directory's data protection class.

VOLUME ATTRIBUTES
     Volume attributes relate to volumes (that is, mounted file systems).  The
     following volume attributes are defined.

     ATTR_VOL_INFO	       For historical reasons you must set
			       ATTR_VOL_INFO in the volattr field if you
			       request any other volume attributes.

     ATTR_VOL_FSTYPE	       A u_int32_t containing the file system type.
			       Equivalent to the f_type field of the statfs
			       structure returned by statfs(2).  Generally not
			       a useful value.

     ATTR_VOL_SIGNATURE        A u_int32_t containing the volume signature
			       word.  This value is unique within a given file
			       system type and lets you distinguish between
			       different volume formats handled by the same
			       file system.

     ATTR_VOL_SIZE	       An off_t containing the total size of the
			       volume in bytes.

     ATTR_VOL_SPACEFREE        An off_t containing the free space on the
			       volume in bytes.

     ATTR_VOL_SPACEAVAIL       An off_t containing the space, in bytes, on the
			       volume available to non-privileged processes.
			       This is the free space minus the amount of
			       space reserved by the system to prevent
			       critical disk exhaustion errors.  Non-
			       privileged programs, like a disk management
			       tool, should use this value to display the
			       space available to the user.

			       ATTR_VOL_SPACEAVAIL is to ATTR_VOL_SPACEFREE as
			       f_bavail is to f_bfree in statfs(2).

     ATTR_VOL_SPACEUSED        An off_t containing the total space used on the
			       volume in bytes.  On space sharing volumes,
			       this value may not be identical to the
			       difference between the volume's size and its
			       free space.

     ATTR_VOL_MINALLOCATION    An off_t containing the minimum allocation size
			       on the volume in bytes.	If you create a file
			       containing one byte, it will consume this much
			       space.

     ATTR_VOL_ALLOCATIONCLUMP  An off_t containing the allocation clump size
			       on the volume, in bytes.  As a file is
			       extended, the file system will attempt to
			       allocate this much space each time in order to
			       reduce fragmentation.

     ATTR_VOL_IOBLOCKSIZE      A u_int32_t containing the optimal block size
			       when reading or writing data.  Equivalent to
			       the f_iosize field of the statfs structure
			       returned by statfs(2).

     ATTR_VOL_OBJCOUNT	       A u_int32_t containing the number of file
			       system objects on the volume.

     ATTR_VOL_FILECOUNT        A u_int32_t containing the number of files on
			       the volume.

     ATTR_VOL_DIRCOUNT	       A u_int32_t containing the number of
			       directories on the volume.

     ATTR_VOL_MAXOBJCOUNT      A u_int32_t containing the maximum number of
			       file system objects that can be stored on the
			       volume.

     ATTR_VOL_MOUNTPOINT       An attrreference structure containing the path
			       to the volume's mount point as a UTF-8 encoded,
			       null terminated C string.  The attribute data
			       length will not be greater than MAXPATHLEN.
			       Equivalent to the f_mntonname field of the
			       statfs structure returned by statfs(2).

     ATTR_VOL_NAME	       (read/write) An attrreference structure
			       containing the name of the volume as a UTF-8
			       encoded, null terminated C string.  The
			       attribute data length will not be greater than
			       NAME_MAX + 1.

			       This attribute is only read/write if the
			       VOL_CAP_INT_VOL_RENAME bit is set in the volume
			       capabilities (see below).

     ATTR_VOL_MOUNTFLAGS       A u_int32_t containing the volume mount flags.
			       This is a copy of the value passed to the flags
			       parameter of mount(2) when the volume was
			       mounted.  Equivalent to the f_flags field of
			       the statfs structure returned by statfs(2).

     ATTR_VOL_MOUNTEDDEVICE    An attrreference structure that returns the
			       same value as the f_mntfromname field of the
			       statfs structure returned by statfs(2).	For
			       local volumes this is the path to the device on
			       which the volume is mounted as a UTF-8 encoded,
			       null terminated C string.  For network volumes,
			       this is a unique string that identifies the
			       mount.  The attribute data length will not be
			       greater than MAXPATHLEN.

     ATTR_VOL_ENCODINGSUSED    An unsigned long long containing a bitmap of
			       the text encodings used on this volume.	For
			       more information about this, see the discussion
			       of encodingsBitmap in DTS Technote 1150 "HFS
			       Plus Volume Format".

     ATTR_VOL_CAPABILITIES     A vol_capabilities_attr_t structure describing
			       the optional features supported by this volume.
			       See below for a discussion of volume
			       capabilities.

     ATTR_VOL_UUID	       A uuid_t containing the file system UUID.
			       Typically this will be a version 5 UUID.

     ATTR_VOL_QUOTA_SIZE       An off_t containing the maximum size of the
			       volume in bytes.

     ATTR_VOL_RESERVED_SIZE    An off_t containing the minimum size of the
			       volume in bytes.

     ATTR_VOL_ATTRIBUTES       A vol_attributes_attr_t structure describing
			       the attributes supported by this volume.  This
			       structure is discussed below, along with volume
			       capabilities.

     ATTR_VOL_FSTYPENAME       An attrreference structure containing the file
			       system type name as a UTF-8 encoded, null
			       terminated C string.  The attribute data length
			       will not be greater than MFSTYPENAMELEN.

     ATTR_VOL_FSSUBTYPE        A u_int32_t containing the file system sub-
			       type.  Equivalent to the f_fssubtype field of
			       the statfs structure returned by statfs(2).

DIRECTORY ATTRIBUTES
     The following directory attributes are defined.

     ATTR_DIR_LINKCOUNT        A u_int32_t containing the number of hard links
			       to the directory; this does not include the
			       historical "." and ".." entries.  For file
			       systems that do not support hard links to
			       directories, this value will be 1.

     ATTR_DIR_ENTRYCOUNT       A u_int32_t containing the number of file
			       system objects in the directory, not including
			       any synthetic items.  The historical "." and
			       ".." entries are also excluded from this count.

     ATTR_DIR_MOUNTSTATUS      A u_int32_t containing flags describing what's
			       mounted on the directory.  Currently the only
			       flag defined is DIR_MNTSTATUS_MNTPOINT, which
			       indicates that there is a file system mounted
			       on this directory.

     ATTR_DIR_ALLOCSIZE        An off_t containing the number of bytes on disk
			       used by the directory (the physical size).

     ATTR_DIR_IOBLOCKSIZE      A u_int32_t containing the optimal block size
			       when reading or writing data.

     ATTR_DIR_DATALENGTH       An off_t containing the length of the directory
			       in bytes (the logical size).

     Requested directory attributes are not returned for file system objects
     that are not directories.

FILE ATTRIBUTES
     The following file attributes are defined.

     ATTR_FILE_LINKCOUNT       A u_int32_t containing the number of hard links
			       to this file.  Equivalent to the st_nlink field
			       of the stat structure returned by stat(2).

     ATTR_FILE_TOTALSIZE       An off_t containing the total number of bytes
			       in all forks of the file (the logical size).

     ATTR_FILE_ALLOCSIZE       An off_t containing a count of the bytes on
			       disk used by all of the file's forks (the
			       physical size).

     ATTR_FILE_IOBLOCKSIZE     A u_int32_t containing the optimal block size
			       when reading or writing this file's data.

     ATTR_FILE_CLUMPSIZE       A u_int32_t containing the allocation clump
			       size for this file, in bytes.  As the file is
			       extended, the file system will attempt to
			       allocate this much space each time in order to
			       reduce fragmentation.  This value applies to
			       the data fork.

     ATTR_FILE_DEVTYPE	       (read/write) A u_int32_t containing the device
			       type for a special device file.	Equivalent to
			       the st_rdev field of the stat structure
			       returned by stat(2).

     ATTR_FILE_FILETYPE        A u_int32_t that whose value is reserved.
			       Clients should ignore its value.  New volume
			       format implementations should not support this
			       attribute.

     ATTR_FILE_FORKCOUNT       A u_int32_t containing the number of forks in
			       the file.  No built-in file systems on Mac OS X
			       currently support forks other than the data and
			       resource fork.

     ATTR_FILE_FORKLIST        An attrreference structure containing a list of
			       named forks of the file.  No built-in file
			       systems on Mac OS X currently support forks
			       other than the data and resource fork.  Because
			       of this, the structure of this attribute's
			       value is not yet defined.

     ATTR_FILE_DATALENGTH      An off_t containing the length of the data fork
			       in bytes (the logical size).

     ATTR_FILE_DATAALLOCSIZE   An off_t containing a count of the bytes on
			       disk used by the data fork (the physical size).

     ATTR_FILE_DATAEXTENTS     An extentrecord array for the data fork.  The
			       array contains eight diskextent structures
			       which represent the first eight extents of the
			       fork.

			       This attributes exists for compatibility
			       reasons.  New clients should not use this
			       attribute.  Rather, they should use the
			       F_LOG2PHYS command in fcntl(2).

			       In current implementations the value may not be
			       entirely accurate for a variety of reasons.

     ATTR_FILE_RSRCLENGTH      An off_t containing the length of the resource
			       fork in bytes (the logical size).

     ATTR_FILE_RSRCALLOCSIZE   An off_t containing a count of the bytes on
			       disk used by the resource fork (the physical
			       size).

     ATTR_FILE_RSRCEXTENTS     An extentrecord array for the resource fork.
			       The array contains eight diskextent structures
			       which represent the first eight extents of the
			       fork.

			       See also ATTR_FILE_DATAEXTENTS.

     File attributes are used for any file system object that is not a
     directory, not just ordinary files.  Requested file attributes are not
     returned for file system objects that are directories.
